#ifndef __PILA_MAX_VD_H__
#define __PILA_MAX_VD_H__

#include <cassert>
#include <iostream>
#include "VD.h"

class Pila_max{
	
	private:
	/** Pila de elementos */
		VD <elemento> pila_max;

	public:

	/*
	 * @brief Se comprueba si la VD de elementos esta vacía.
	 * @return True si es cierto que esta vacía y false en caso contrario.
  	 */
		inline bool vacia() const{
			return pila_max.size() == 0;
		}

	/*
     * @brief Añadir a la VD de datos.
 	 * @param dato Elemento a añadir a la VD en la última posición.
  	 */
		void poner(const int dato);

	/*
	 * @brief Constructor por defecto.
	 */
		Pila_max();
	
	/*
	 * @brief Constructor por parámetros.
	 * @param pila VD de elementos para inicializar pils_max.
	 */
		Pila_max(const VD <elemento> pila);

	/*
	 * @brief Constructor de copia. Inicializa el dato privado pila_max con el 
	 * 	de un elemento de Pila_max ya creado.
	 * @param otra_pila_max Elemento de esta clase con el cual se quiere inicializar
	 *	pila_max.
	 */
		Pila_max(const Pila_max& otra_pila_max);

	/*
   	 * @brief Operador de asignación.
	 */
		Pila_max& operator=(const Pila_max& otra);

	/*
	 * @brief Eliminar el último elemento de la pila.
	 */
		void quitar();

	/*
	 * @brief Último elemento de la pila.
 	 * @return Tope.
	 */
		elemento& tope();

		const elemento& tope() const;

	/*
  	 * @brief Número de elementos que contiene la pila.
	 * @return Número de elementos.
	 */

		inline int numElementos() const{
			return pila_max.size();
		}

};

#endif // __PILA_MAX_VD_H__