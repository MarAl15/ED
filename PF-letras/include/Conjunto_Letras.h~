//
//  Conjunto_Letras.h
//  
//
//
//
#ifndef ___Conjunto_Letras__
#define ___Conjunto_Letras__

#include "Letras.h"
#include <iostream>
#include <map>
#include <set>
#include<string>

using namespace std;

class Conjunto_Letras{
private:
    multiset<Letras> letras;
public:
    Conjunto_Letras(){
    }    

	bool vocal(char l){
		return ((l=='A') || (l=='E') || (l=='I') || (l=='O') || (l=='U'));
	}

	vector<char> devuelveVocales()	{
		vector<char> vocales;

		multiset <Letras>::iterator i;

		for(i=letras.begin(); i!=letras.end(); ++i){
			if(vocal((*i).Letra()))
				vocales.push_back((*i).Letra());

		}
		return vocales;
	}

	 vector<char> devuelveConsonantes()
	 {
		vector<char> consonantes;

		multiset <Letras>::iterator i;

		for(i=letras.begin(); i!=letras.end(); ++i){
			if(!vocal((*i).Letra()))
				consonantes.push_back((*i).Letra());
		}

		return consonantes;

	}

    friend istream & operator >>(std::istream &is, Conjunto_Letras &C){
    	Letras nueva;
    	string aux;
		//int tamanio;
    	vector<string> n;
    

		//int j = 1 ;
    	if(!is.eof())
       		getline(is,aux);
    
    	char l;
    	int c,p;
    	while(!is.eof()){
        	is>>l;
        	is>>c;
        	is>>p;

        	nueva.asignaLetra(l);
        	nueva.asignaNum(c);
        	nueva.asignaPuntos(p);
        
        	for(int i = 0 ; i < c; i++){
            	C.letras.insert(nueva);
   			}

   		}

   		return is;
    }


    int getPuntuacion(string palabra){
		multiset<Letras>::iterator it;

		bool encontrada;
		int puntuacion = 0 ;
		for(unsigned int i = 0 ; i < palabra.size() ;i++){
			encontrada = false;
			for(it= letras.begin() ; it != letras.end() && !encontrada ; ++it){
				if(palabra.at(i) == (*it).Letra()){
					encontrada = true;
					puntuacion += (*it).Puntuacion();
				}
			}
		}
	}
};

#endif
